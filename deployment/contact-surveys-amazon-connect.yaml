AWSTemplateFormatVersion: "2010-09-09"
Description: "Post-contact Surveys for Amazon Connect deployment"

Parameters:
    ResourceNamePrefix:
        Type: String
        Description: "The Prefix for resources rather than *vf* - always lowercase"
        Default: "vf"
    Environment:
        Description: "Max Length Constraint of 5 characters - always lowercase"
        Type: String
        Default: dev
        MaxLength: 5
    AmazonConnectInstanceARN:
        Type: String
        Description: The Amazon Connect instance ARN
    AmazonConnectInstanceName:
        Type: String
        Description: The Amazon Connect instance name
    ContactFlowARNForTasks:
        Type: String
        Description: The contact flow ARN you want generated tasks to be directed to
    AdminEmailAddress:
        Type: String
        Description: "The email address for the initial user of the solution"
    Path:
        Type: String
        Default: "/"
    PermissionsBoundary:
        Type: String
        Description: "Leave as *none* if not using permission boundaries on roles"
        Default: "none"


#################
### CONDITIONS ##
#################

Conditions:
  # Add condition for Permission Boundary
    PermissionBoundarySet: !Equals [!Ref PermissionsBoundary, "none"]

Resources:
    UserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: !Sub ${ResourceNamePrefix}-pcs-${Environment}
            UsernameConfiguration:
                CaseSensitive: false
            AutoVerifiedAttributes:
                - email
            Schema:
                - Name: email
                  AttributeDataType: String
                  Mutable: false
                  Required: true
            AliasAttributes:
                - email

    UserPoolUser:
        Type: AWS::Cognito::UserPoolUser
        Properties:
            DesiredDeliveryMediums:
                - EMAIL
            ForceAliasCreation: true
            Username: admin
            UserPoolId: !Ref UserPool
            UserAttributes:
                - Name: email
                  Value: !Ref AdminEmailAddress

    UserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: "post-contact-survey-frontend"
            ExplicitAuthFlows:
                - ALLOW_CUSTOM_AUTH
                - ALLOW_USER_SRP_AUTH
                - ALLOW_REFRESH_TOKEN_AUTH
            UserPoolId: !Ref UserPool

    FrontEndS3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref FrontEndS3Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Id: "PolicyForCloudFrontPrivateContent"
                Statement:
                    - Action:
                          - "s3:GetObject"
                      Effect: Allow
                      Resource: !Join ["", [!GetAtt FrontEndS3Bucket.Arn, "/*"]]
                      Principal:
                          CanonicalUser: !GetAtt [CDNOriginIdentity, S3CanonicalUserId]

    FrontEndS3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Sub ${ResourceNamePrefix}-pcs-frontend-${Environment}
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    CDNOriginIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: "Cloudfront Origin identity"

    CustomCachePolicy:
        Type: AWS::CloudFront::CachePolicy
        Properties:
            CachePolicyConfig:
                Comment: String
                DefaultTTL: 3600
                MaxTTL: 86400
                MinTTL: 500
                Name: !Sub "${ResourceNamePrefix}-pcs-CachePolicy-${Environment}"
                ParametersInCacheKeyAndForwardedToOrigin:
                    CookiesConfig:
                        CookieBehavior: none
                    EnableAcceptEncodingBrotli: true
                    EnableAcceptEncodingGzip: true
                    HeadersConfig:
                        HeaderBehavior: whitelist
                        Headers:
                            - Authorization
                    QueryStringsConfig:
                        QueryStringBehavior: none

    CustomOriginRequestPolicy:
        Type: AWS::CloudFront::OriginRequestPolicy
        Properties:
            OriginRequestPolicyConfig:
                Name: !Sub ${ResourceNamePrefix}-pcs-CustomOriginRequestPolicy-${Environment}
                CookiesConfig:
                    CookieBehavior: all
                HeadersConfig:
                    HeaderBehavior: none
                QueryStringsConfig:
                    QueryStringBehavior: all

    CloudFrontDistribution:
        Type: "AWS::CloudFront::Distribution"
        Properties:
            DistributionConfig: 
                Logging:
                    Bucket: !GetAtt FrontEndS3Bucket.RegionalDomainName
                    Prefix: "logs"
                CustomErrorResponses:
                    - ErrorCode: 404
                      ResponseCode: 200
                      ResponsePagePath: "/index.html"
                    - ErrorCode: 403
                      ResponseCode: 200
                      ResponsePagePath: "/index.html"
                DefaultCacheBehavior:
                    AllowedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                    ForwardedValues:
                        Cookies:
                            Forward: none
                        QueryString: false
                    TargetOriginId: !Sub "S3-origin-${FrontEndS3Bucket}"
                    ViewerProtocolPolicy: redirect-to-https
                DefaultRootObject: index.html
                Enabled: True
                HttpVersion: http2
                Origins:
                    - DomainName: !GetAtt FrontEndS3Bucket.RegionalDomainName
                      Id: !Sub "S3-origin-${FrontEndS3Bucket}"
                      S3OriginConfig:
                          OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CDNOriginIdentity}"
                    - DomainName: !Sub "${SurveysApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
                      Id: !Sub "API-origin-${SurveysApiGateway}"
                      CustomOriginConfig:
                          OriginSSLProtocols:
                              - "TLSv1.2"
                          OriginProtocolPolicy: https-only
                CacheBehaviors:
                    - TargetOriginId: !Sub "API-origin-${SurveysApiGateway}"
                      CachePolicyId: !Ref CustomCachePolicy
                      Compress: true
                      PathPattern: "dev/*"
                      ViewerProtocolPolicy: "redirect-to-https"
                      OriginRequestPolicyId: !Ref CustomOriginRequestPolicy
                      AllowedMethods:
                          - HEAD
                          - DELETE
                          - POST
                          - GET
                          - OPTIONS
                          - PUT
                          - PATCH
                PriceClass: PriceClass_All

    LambdaUuidLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            CompatibleArchitectures:
                - x86_64
            CompatibleRuntimes:
                - nodejs16.x
            Content:
                S3Bucket: !Sub "vf-pcs-deploy-${AWS::Region}-${AWS::AccountId}"
                S3Key: "uuid-layer.zip"
            LayerName: !Sub ${ResourceNamePrefix}-pcs-uuid-layer-${Environment}

    LambdaWriteSurveysResults:
        Type: AWS::Lambda::Function
        Properties:
            Description: "Called by Amazon Connect contact flows to write results of a completed survey"
            Handler: index.handler
            Runtime: nodejs16.x
            Role: !GetAtt LambdaWriteSurveyResultsRole.Arn
            FunctionName: !Sub ${ResourceNamePrefix}-pcs-surveys-write-results-${Environment}
            Timeout: 12
            Layers:
                - !Ref LambdaUuidLayer
            Environment:
                Variables:
                    TABLE: !Ref SurveysResultsDDBTable
            Code:
                S3Bucket: !Sub 'vf-sc-templates-${AWS::Region}-699520165046'
                S3Key: 'LambdaWriteSurveysResults.zip'

    LambdaSurveyApi:
        Type: AWS::Lambda::Function
        Properties:
            Description: "The backend for the API powering the Amazon Connect Post Call Surveys Manager"
            Handler: index.handler
            Runtime: nodejs16.x
            Role: !GetAtt LambdaSurveysApiRole.Arn
            FunctionName: !Sub ${ResourceNamePrefix}-pcs-surveys-api-${Environment}
            Timeout: 12
            Layers:
                - !Ref LambdaUuidLayer
            Environment:
                Variables:
                    TABLE_SURVEYS_CONFIG: !Ref SurveysConfigDDBTable
                    TABLE_SURVEYS_RESULTS: !Ref SurveysResultsDDBTable
            Code:
                S3Bucket: !Sub 'vf-sc-templates-${AWS::Region}-699520165046'
                S3Key: 'LambdaSurveyApi.zip'



    LambdaGetSurveyConfig:
        Type: AWS::Lambda::Function
        DependsOn:
            - LambdaUuidLayer
        Properties:
            Description: "Called by Amazon Connect contact flows to retrieve a survey configuration"
            Handler: index.handler
            Runtime: nodejs16.x
            Role: !GetAtt LambdaGetSurveyConfigRole.Arn
            FunctionName: !Sub ${ResourceNamePrefix}-pcs-get-survey-config-${Environment}
            Timeout: 12
            Code:
                S3Bucket: !Sub 'vf-sc-templates-${AWS::Region}-699520165046'
                S3Key: 'LambdaGetSurveyConfig.zip'
            Environment:
                Variables:
                    TABLE: !Ref SurveysConfigDDBTable

    LambdaProcessSurveyFlagsConfig:
        Type: AWS::Lambda::Function
        Properties:
            Description: "Called by Amazon Connect contact flows to determine if tasks should be sent to alert on survey results"
            Handler: index.handler
            Runtime: nodejs16.x
            Role: !GetAtt LambdaProcessSurveysFlagsRole.Arn
            FunctionName: !Sub ${ResourceNamePrefix}-pcs-process-survey-flags-${Environment}
            Timeout: 12
            Layers:
                - !Ref LambdaUuidLayer
            Environment:
                Variables:
                    CONTACT_FLOW_ID: !Ref ContactFlowARNForTasks
                    INSTANCE_NAME: !Ref AmazonConnectInstanceName
            Code:
                S3Bucket: !Sub 'vf-sc-templates-${AWS::Region}-699520165046'
                S3Key: 'LambdaProcessSurveyFlagsConfig.zip'


    LambdaSurveyUtils:
        Type: AWS::Lambda::Function
        DependsOn:
            - LambdaUuidLayer
        Properties:
            Description: "A set of utilities for the solution to work"
            Handler: index.handler
            Runtime: nodejs16.x
            Role: !GetAtt LambdaSurveysUtilsRole.Arn
            FunctionName: !Sub ${ResourceNamePrefix}-pcs-utils-${Environment}
            Timeout: 12
            Code:
                S3Bucket: !Sub 'vf-sc-templates-${AWS::Region}-699520165046'
                S3Key: 'LambdaSurveyUtils.zip'


    CognitoAuthorizer:
        Type: AWS::ApiGateway::Authorizer
        Properties:
            IdentitySource: method.request.header.Authorization
            Name: CognitoAuthorizer
            ProviderARNs:
                - !GetAtt UserPool.Arn
            RestApiId: !Ref SurveysApiGateway
            Type: COGNITO_USER_POOLS

    SurveysApiGateway:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name: !Sub ${ResourceNamePrefix}-pcs-api-cf-${Environment}

    SurveysApiDeployment:
        Type: AWS::ApiGateway::Deployment
        DependsOn:
            - ApiSurveysAnyMethod
            - ApiSurveysOptionsMethod
            - ApiResultsAnyMethod
            - ApiResultsOptionsMethod
        Properties:
            RestApiId: !Ref SurveysApiGateway
            StageName: "DummyStage"

    SurveysApiStage:
        Type: AWS::ApiGateway::Stage
        Properties:
            RestApiId: !Ref SurveysApiGateway
            StageName: dev
            DeploymentId: !Ref SurveysApiDeployment
            MethodSettings:
                - DataTraceEnabled: true
                  HttpMethod: "*"
                  LoggingLevel: "ERROR"
                  ResourcePath: "/*"

# Add CloudWatch Logging Role to the API Gateway Settings for the account.
    ApiCWLRoleArn:
        Type: AWS::ApiGateway::Account
        Properties: 
            CloudWatchRoleArn: !GetAtt APIGatewayCloudWatchRole.Arn

# IAM Role for API Gateway + CloudWatch Logging
    APIGatewayCloudWatchRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${ResourceNamePrefix}-pcs-api-cw-role-${Environment}
            Path: !Ref Path
            PermissionsBoundary:
                !If [
                PermissionBoundarySet,
                !Ref "AWS::NoValue",
                !Ref PermissionsBoundary,
                ]
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    Action: 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                        Service: apigateway.amazonaws.com
            ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

    ApiResultsOptionsMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            AuthorizationType: NONE
            RestApiId: !Ref SurveysApiGateway
            ResourceId: !Ref ApiResultsResource
            HttpMethod: OPTIONS
            Integration:
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                      ResponseTemplates:
                          application/json: ""
                PassthroughBehavior: WHEN_NO_MATCH
                RequestTemplates:
                    application/json: '{"statusCode": 200}'
                Type: MOCK
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: false
                      method.response.header.Access-Control-Allow-Methods: false
                      method.response.header.Access-Control-Allow-Origin: false

    ApiSurveysOptionsMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            AuthorizationType: NONE
            RestApiId: !Ref SurveysApiGateway
            ResourceId: !Ref ApiSurveysResource
            HttpMethod: OPTIONS
            Integration:
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                      ResponseTemplates:
                          application/json: ""
                PassthroughBehavior: WHEN_NO_MATCH
                RequestTemplates:
                    application/json: '{"statusCode": 200}'
                Type: MOCK
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: false
                      method.response.header.Access-Control-Allow-Methods: false
                      method.response.header.Access-Control-Allow-Origin: false

    ApiSurveysResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref SurveysApiGateway
            ParentId: !GetAtt SurveysApiGateway.RootResourceId
            PathPart: "surveys"

    ApiResultsResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref SurveysApiGateway
            ParentId: !GetAtt SurveysApiGateway.RootResourceId
            PathPart: "results"

    ApiResultsAnyMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            AuthorizationType: COGNITO_USER_POOLS
            AuthorizerId: !Ref CognitoAuthorizer
            HttpMethod: "ANY"
            ResourceId: !Ref ApiResultsResource
            RestApiId: !Ref SurveysApiGateway
            Integration:
                Type: "AWS_PROXY"
                IntegrationHttpMethod: "POST"
                Uri:
                    !Join [
                        "",
                        [
                            "arn:aws:apigateway:",
                            !Ref AWS::Region,
                            ":lambda:path/2015-03-31/functions/",
                            !GetAtt LambdaSurveyApi.Arn,
                            "/invocations",
                        ],
                    ]
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: false
                      method.response.header.Access-Control-Allow-Methods: false
                      method.response.header.Access-Control-Allow-Origin: false

    ApiSurveysAnyMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            AuthorizationType: COGNITO_USER_POOLS
            AuthorizerId: !Ref CognitoAuthorizer
            HttpMethod: "ANY"
            ResourceId: !Ref ApiSurveysResource
            RestApiId: !Ref SurveysApiGateway
            Integration:
                Type: "AWS_PROXY"
                IntegrationHttpMethod: "POST"
                Uri:
                    !Join [
                        "",
                        [
                            "arn:aws:apigateway:",
                            !Ref AWS::Region,
                            ":lambda:path/2015-03-31/functions/",
                            !GetAtt LambdaSurveyApi.Arn,
                            "/invocations",
                        ],
                    ]
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: false
                      method.response.header.Access-Control-Allow-Methods: false
                      method.response.header.Access-Control-Allow-Origin: false

    LambdaSurveyApiPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: "lambda:invokeFunction"
            FunctionName: !GetAtt LambdaSurveyApi.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn:
                !Join [
                    "",
                    [
                        "arn:aws:execute-api:",
                        !Ref AWS::Region,
                        ":",
                        !Ref AWS::AccountId,
                        ":",
                        !Ref SurveysApiGateway,
                        "/*",
                    ],
                ]

    SurveysConfigDDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: surveyId
                  AttributeType: S
            KeySchema:
                - AttributeName: surveyId
                  KeyType: HASH
            TableName: !Sub ${ResourceNamePrefix}-pcs-surveys-config-${Environment}
            BillingMode: PAY_PER_REQUEST

    SurveysResultsDDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: contactId
                  AttributeType: S
            KeySchema:
                - AttributeName: contactId
                  KeyType: HASH
            TableName: !Sub ${ResourceNamePrefix}-pcs-surveys-results-${Environment}
            BillingMode: PAY_PER_REQUEST


    LambdaSurveysUtilsRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${ResourceNamePrefix}-pcs-utils-${Environment}
            Path: !Ref Path
            PermissionsBoundary:
                !If [
                PermissionBoundarySet,
                !Ref "AWS::NoValue",
                !Ref PermissionsBoundary,
                ]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    LambdaProcessSurveysFlagsRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${ResourceNamePrefix}-pcs-surveyflags-${Environment}
            Path: !Ref Path
            PermissionsBoundary:
                !If [
                PermissionBoundarySet,
                !Ref "AWS::NoValue",
                !Ref PermissionsBoundary,
                ]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: InlineConnectPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - connect:StartTaskContact
                            Resource:
                                - !Join ["/", [!Ref AmazonConnectInstanceARN, "contact-flow", !Ref     ContactFlowARNForTasks]]

    LambdaSurveysApiRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${ResourceNamePrefix}-pcs-surveyapi-${Environment}
            Path: !Ref Path
            PermissionsBoundary:
                !If [
                PermissionBoundarySet,
                !Ref "AWS::NoValue",
                !Ref PermissionsBoundary,
                ]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: InlineDDBPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:PutItem
                                - dynamodb:DeleteItem
                                - dynamodb:UpdateItem
                                - dynamodb:Scan
                            Resource:
                                - !GetAtt SurveysConfigDDBTable.Arn
                                - !GetAtt SurveysResultsDDBTable.Arn
                                - !Join ["/", [!GetAtt SurveysConfigDDBTable.Arn, "index/surveyId"]]
                                - !Join ["/", [!GetAtt SurveysResultsDDBTable.Arn, "index/contactId"]]

    LambdaGetSurveyConfigRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${ResourceNamePrefix}-pcs-surveyconfig-${Environment}
            Path: !Ref Path
            PermissionsBoundary:
                !If [
                PermissionBoundarySet,
                !Ref "AWS::NoValue",
                !Ref PermissionsBoundary,
                ]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: InlineDDBPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:GetItem
                                - dynamodb:Scan
                            Resource:
                                - !GetAtt SurveysConfigDDBTable.Arn
                                - !Join ["/", [!GetAtt SurveysConfigDDBTable.Arn, "index/surveyId"]]

    LambdaWriteSurveyResultsRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${ResourceNamePrefix}-pcs-surveyresults-${Environment}
            Path: !Ref Path
            PermissionsBoundary:
                !If [
                PermissionBoundarySet,
                !Ref "AWS::NoValue",
                !Ref PermissionsBoundary,
                ]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: InlineDDBPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:PutItem
                            Resource:
                                - !GetAtt SurveysResultsDDBTable.Arn
                                - !Join ["/", [!GetAtt SurveysResultsDDBTable.Arn, "index/surveyId"]]

    S3CustomResource:
        Type: Custom::S3CustomResource
        Properties:
            ServiceToken: !GetAtt CustomResourceS3LambdaFunction.Arn
            SourceBucket: !Sub 'vf-pcs-deploy-${AWS::Region}-${AWS::AccountId}'
            DestinationBucket: !Ref FrontEndS3Bucket

    CustomResourceS3LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Handler: index.handler
            Role: !GetAtt CustomResourceS3LambdaExecutionRole.Arn
            Timeout: 360
            Runtime: nodejs16.x
            Code:
                ZipFile: |
                    const AWS = require("aws-sdk");
                    var response = require('cfn-response');
                    const s3 = new AWS.S3();

                    exports.handler = (event, context) => {

                        const request = event.RequestType;

                        switch (request) {
                            case "Create":
                                var params = {
                                    Bucket: event.ResourceProperties.SourceBucket,
                                    Prefix: "frontend"
                                }
                                getBucketContent(params).then((data) => {

                                        copyObjects(data).then((data) => {
                                                console.log("Object copied successfully");
                                                response.send(event, context, response.SUCCESS, {});
                                            })
                                            .catch((e) => {
                                                console.log(e);
                                                response.send(event, context, response.FAILED, {});
                                            })
                                    })
                                    .catch(e => {
                                        console.log(e);
                                    })

                                break;
                            case "Update":
                                var params = {
                                    Bucket: event.ResourceProperties.SourceBucket,
                                    Prefix: "frontend"
                                }
                                getBucketContent(params).then((data) => {

                                        copyObjects(data).then((data) => {
                                                console.log("Object copied successfully");
                                                response.send(event, context, response.SUCCESS, {});
                                            })
                                            .catch((e) => {
                                                console.log(e);
                                                response.send(event, context, response.FAILED, {});
                                            })
                                    })
                                    .catch(e => {
                                        console.log(e);
                                        response.send(event, context, response.FAILED, {});
                                    })

                                break;
                            case "Delete":
                                var params = {
                                    Bucket: event.ResourceProperties.DestinationBucket,
                                    Prefix: ""
                                }
                                getBucketContent(params).then((data) => {

                                        deleteObjects(data).then((data) => {
                                                console.log("Objects deleted successfully");
                                                response.send(event, context, response.SUCCESS, {});
                                            })
                                            .catch((e) => {
                                                console.log(e);
                                                response.send(event, context, response.FAILED, {});
                                            })
                                    })
                                    .catch(e => {
                                        console.log(e);
                                        response.send(event, context, response.FAILED, {});
                                    })

                                break;
                            default:
                                console.log("Unsupported operation.");
                                response.send(event, context, response.FAILED, {});
                                console.log("Sending FAILED from default");
                        }

                        function getBucketContent(params) {
                            return new Promise(async (res, rej) => {
                                try {
                                    const list = await s3.listObjectsV2(params).promise();

                                    console.log("1. Listed content");
                                    res(list);
                                }
                                catch (e) {
                                    rej(e);
                                }

                            });
                        }

                        function copyObjects(data) {
                            return new Promise(async (res, rej) => {
                                for (let index in data.Contents) {
                                    var params = {
                                        Bucket: event.ResourceProperties.DestinationBucket,
                                        CopySource: event.ResourceProperties.SourceBucket + "/" + data.Contents[index].Key,
                                        Key: data.Contents[index].Key.replace("frontend/", "")
                                    }

                                    try {
                                        const res = await s3.copyObject(params).promise();
                                    }
                                    catch (e) {
                                        rej(e);
                                    }
                                }
                                console.log("1. Finished copying");

                                res(true);
                            });
                        }

                        function deleteObjects(data) {
                            return new Promise(async (res, rej) => {
                                for (let index in data.Contents) {
                                    var params = {
                                        Bucket: event.ResourceProperties.DestinationBucket,
                                        Key: data.Contents[index].Key
                                    }

                                    try {
                                        console.log(params);
                                        const res = await s3.deleteObject(params).promise();
                                        console.log(res)
                                    }
                                    catch (e) {
                                        rej(e);
                                    }
                                }
                                console.log("1. Finished deleting");

                                res(true);
                            });
                        }
                    };

    CustomResourceS3LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${ResourceNamePrefix}-pcs-crs3-exec-${Environment}
            Path: !Ref Path
            PermissionsBoundary:
                !If [
                PermissionBoundarySet,
                !Ref "AWS::NoValue",
                !Ref PermissionsBoundary,
                ]
            AssumeRolePolicyDocument:
                Statement:
                    - Action:
                          - sts:AssumeRole
                      Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                Version: "2012-10-17"
            Policies:
                - PolicyDocument:
                      Statement:
                          - Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Effect: Allow
                            Resource: arn:aws:logs:*:*:*
                      Version: "2012-10-17"
                  PolicyName: !Sub ${ResourceNamePrefix}-pcs-crcw-${Environment}
                - PolicyDocument:
                      Statement:
                          - Action:
                                - s3:DeleteObject
                                - s3:List*
                                - s3:GetObject
                                - s3:PutObject
                            Effect: Allow
                            Resource:
                                - !Sub arn:aws:s3:::vf-pcs-deploy-${AWS::Region}-${AWS::AccountId}/*
                                - !Sub arn:aws:s3:::vf-pcs-deploy-${AWS::Region}-${AWS::AccountId}
                                - !Sub arn:aws:s3:::${FrontEndS3Bucket}/*
                                - !Sub arn:aws:s3:::${FrontEndS3Bucket}
                      Version: "2012-10-17"
                  PolicyName: !Sub ${ResourceNamePrefix}-pcs-crs3-${Environment}
                  

    LambdaCustomResource:
        Type: Custom::LambdaCustomResource
        DependsOn:
            - S3CustomResource
        Properties:
            ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
            CognitoPoolId: !Ref UserPool
            CognitoClientId: !Ref UserPoolClient
            ApiEndpoint: !GetAtt CloudFrontDistribution.DomainName
            BucketName: !Ref FrontEndS3Bucket

    CustomResourceLambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Handler: index.handler
            Role: !GetAtt CustomResourceLambdaExecutionRole.Arn
            Timeout: 10
            Runtime: nodejs16.x
            Code:
                ZipFile: |
                    var response = require('cfn-response');
                    const AWS = require('aws-sdk');
                    const s3 = new AWS.S3();

                    exports.handler = (event, context) => {

                        const request = event.RequestType;

                        if (request == "Create" || request == "Update") {
                            const content = `window.app_configuration = { cognito_pool_id: "${event.ResourceProperties.CognitoPoolId}", cognito_client_id: "${event.ResourceProperties.CognitoClientId}", api_endpoint: "/dev/surveys" }`;

                            var params = {
                                Body: content,
                                Bucket: event.ResourceProperties.BucketName,
                                Key: "config.js",
                                ContentType: "application/javascript"
                            }

                            s3.putObject(params, function(err, data) {
                                if (err) {
                                    console.log(err);
                                    response.send(event, context, response.FAILED, {});
                                } else {
                                    response.send(event, context, response.SUCCESS, {});
                                }
                            });        
                        } else {
                            response.send(event, context, response.SUCCESS, {});
                        }
                    };

    CustomResourceLambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${ResourceNamePrefix}-pcs-cr-exec-${Environment}
            Path: !Ref Path
            PermissionsBoundary:
                !If [
                PermissionBoundarySet,
                !Ref "AWS::NoValue",
                !Ref PermissionsBoundary,
                ]
            AssumeRolePolicyDocument:
                Statement:
                    - Action:
                          - sts:AssumeRole
                      Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                Version: "2012-10-17"
            Policies:
                - PolicyDocument:
                      Statement:
                          - Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Effect: Allow
                            Resource: arn:aws:logs:*:*:*
                      Version: "2012-10-17"
                  PolicyName: !Sub ${ResourceNamePrefix}-pcs-crlogs-${Environment}                  
                - PolicyDocument:
                      Statement:
                          - Action:
                                - s3:PutObject
                            Effect: Allow
                            Resource:
                                - !Join ["/", [!GetAtt FrontEndS3Bucket.Arn, "config.js"]]
                      Version: "2012-10-17"
                  PolicyName: !Sub ${ResourceNamePrefix}-pcs-crconfig-${Environment}                  

    ConnectFunctionPolicyLambdaGetSurveyConfig:
        Type: AWS::Lambda::Permission
        Properties:
          FunctionName: !Ref LambdaGetSurveyConfig
          Action: "lambda:InvokeFunction"
          Principal:  "connect.amazonaws.com"
          SourceAccount: !Sub ${AWS::AccountId}
          SourceArn: !Ref AmazonConnectInstanceARN

    ConnectFunctionPolicyLambdaWriteSurveysResults:
        Type: AWS::Lambda::Permission
        Properties:
          FunctionName: !Ref LambdaWriteSurveysResults
          Action: "lambda:InvokeFunction"
          Principal:  "connect.amazonaws.com"
          SourceAccount: !Sub ${AWS::AccountId}
          SourceArn: !Ref AmazonConnectInstanceARN

    ConnectFunctionPolicyLambdaSurveyUtils:
        Type: AWS::Lambda::Permission
        Properties:
          FunctionName: !Ref LambdaSurveyUtils
          Action: "lambda:InvokeFunction"
          Principal:  "connect.amazonaws.com"
          SourceAccount: !Sub ${AWS::AccountId}
          SourceArn: !Ref AmazonConnectInstanceARN

    ConnectFunctionPolicyLambdaProcessSurveyFlagsConfig:
        Type: AWS::Lambda::Permission
        Properties:
          FunctionName: !Ref LambdaProcessSurveyFlagsConfig
          Action: "lambda:InvokeFunction"
          Principal:  "connect.amazonaws.com"
          SourceAccount: !Sub ${AWS::AccountId}
          SourceArn: !Ref AmazonConnectInstanceARN

    ContactFlowModule:
        Type: AWS::Connect::ContactFlowModule
        DependsOn:
            - ConnectFunctionPolicyLambdaGetSurveyConfig
            - ConnectFunctionPolicyLambdaWriteSurveysResults
            - ConnectFunctionPolicyLambdaSurveyUtils
            - ConnectFunctionPolicyLambdaProcessSurveyFlagsConfig
        Properties:
            Content: !Sub '{"Version":"2019-10-30","StartAction":"4aa37d68-34fd-4cbf-af84-dd86cd97d758","Metadata":{"entryPointPosition":{"x":14.4,"y":14.4},"ActionMetadata":{"eda22bf3-c3f9-459f-8374-d56f84620644":{"position":{"x":345.6,"y":757.6}},"54b8b0f4-53b1-493a-9b74-e4056d92400e":{"position":{"x":2129.6,"y":240.8}},"f669287d-527d-41b9-b6e3-ecdbc330755c":{"position":{"x":2352.8,"y":225.60000000000002},"parameters":{"Attributes":{"loopCounter":{"useDynamic":true}}},"dynamicParams":["loopCounter"]},"8c223e1b-d94a-4b9c-acb5-3f400b030105":{"position":{"x":2136.8,"y":512},"parameters":{"Attributes":{"survey_result_$.Attributes.loopCounter":{"useDynamic":true}}},"dynamicParams":["survey_result_$.Attributes.loopCounter"]},"178a925b-dc1c-4d84-ab5f-84f50b5e8a2e":{"position":{"x":2653.6000000000004,"y":782.4000000000001}},"241f8a68-56ff-49a2-99ee-68625cd82310":{"position":{"x":2364.8,"y":502.40000000000003},"parameters":{"Attributes":{"loopCounter":{"useDynamic":true}}},"dynamicParams":["loopCounter"]},"3bb7ac4c-4ebf-4c6d-ab1f-fbdbdf8a0748":{"position":{"x":632,"y":284.8},"parameters":{"Text":{"useDynamic":true}},"useDynamic":true},"e15e93de-3bae-47a8-ae59-d38b239849ce":{"position":{"x":344,"y":516.8000000000001}},"ce7cd3b5-5eec-4d7f-802c-f1e8621baccd":{"position":{"x":304,"y":277.6},"parameters":{"Attributes":{"surveyId":{"useDynamic":true},"intro":{"useDynamic":true},"surveySize":{"useDynamic":true},"outro":{"useDynamic":true}}},"dynamicParams":["surveyId","intro","surveySize","outro"]},"f1ec1587-371d-4b88-aeb0-cf92c3b10a3e":{"position":{"x":62.400000000000006,"y":489.6}},"4aa37d68-34fd-4cbf-af84-dd86cd97d758":{"position":{"x":184.8,"y":49.6}},"768119b4-b9c1-4f0d-85b0-3bb77958e1d0":{"position":{"x":58.400000000000006,"y":280.8},"parameters":{"LambdaFunctionARN":{"displayName":"${LambdaGetSurveyConfig}"},"LambdaInvocationAttributes":{"surveyId":{"useDynamic":true}}},"dynamicMetadata":{"surveyId":true}},"224cfa54-c321-454b-8911-007386bd9fd3":{"position":{"x":1220,"y":280},"parameters":{"LambdaFunctionARN":{"displayName":"${LambdaSurveyUtils}"},"LambdaInvocationAttributes":{"max":{"useDynamic":true},"flag_question_3":{"useDynamic":true},"flag_question_2":{"useDynamic":true},"flag_question_5":{"useDynamic":true},"min":{"useDynamic":true},"currentQuestionIndex":{"useDynamic":true},"flag_question_4":{"useDynamic":true},"flag_question_1":{"useDynamic":true},"question_3":{"useDynamic":true},"question_4":{"useDynamic":true},"question_1":{"useDynamic":true},"question_2":{"useDynamic":true},"question_5":{"useDynamic":true}}},"dynamicMetadata":{"max":true,"flag_question_3":true,"flag_question_2":true,"flag_question_5":true,"min":true,"currentQuestionIndex":true,"flag_question_4":true,"flag_question_1":true,"question_3":true,"question_4":true,"question_1":true,"question_2":true,"operation":false,"question_5":true}},"63107da9-ea91-4c3c-b5df-d8303d240363":{"position":{"x":1905.6000000000001,"y":280},"conditionMetadata":[{"id":"17e2a1c2-0acb-4bce-a6cf-5fcfc37aa3e5","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"false"}]},"56177ee5-4215-4449-a3e3-589d6d7add11":{"position":{"x":1449.6000000000001,"y":278.40000000000003},"parameters":{"Text":{"useDynamic":true}},"useDynamic":true,"conditionMetadata":[],"countryCodePrefix":"+1"},"da0ecb02-b835-4471-af5e-525686b26248":{"position":{"x":1912,"y":624.8000000000001}},"3e442c84-4cf0-412b-ad2c-627b9fde7c39":{"position":{"x":1676.8000000000002,"y":277.6},"parameters":{"LambdaFunctionARN":{"displayName":"${LambdaSurveyUtils}"},"LambdaInvocationAttributes":{"max":{"useDynamic":true},"flag_question_3":{"useDynamic":true},"input":{"useDynamic":true},"flag_question_2":{"useDynamic":true},"flag_question_5":{"useDynamic":true},"min":{"useDynamic":true},"currentQuestionIndex":{"useDynamic":true},"flag_question_4":{"useDynamic":true},"newCounter":{"useDynamic":true},"flag_question_1":{"useDynamic":true},"question_3":{"useDynamic":true},"question_4":{"useDynamic":true},"question_1":{"useDynamic":true},"question_2":{"useDynamic":true},"question_5":{"useDynamic":true}}},"dynamicMetadata":{"max":true,"flag_question_3":true,"input":true,"flag_question_2":true,"flag_question_5":true,"min":true,"currentQuestionIndex":true,"flag_question_4":true,"newCounter":true,"flag_question_1":true,"question_3":true,"question_4":true,"question_1":true,"question_2":true,"operation":false,"question_5":true}},"aa827bc2-ef0e-491a-b4b6-01122dda599d":{"position":{"x":1004.8000000000001,"y":280.8},"parameters":{"LoopCount":{"useDynamic":true}},"useDynamic":true},"c96fee53-310f-4d1f-8e88-859e2fad8ab5":{"position":{"x":1237.6000000000001,"y":844}},"48c2e006-db9f-4dab-b5bf-e8e81785fc49":{"position":{"x":888.8000000000001,"y":656},"parameters":{"Text":{"useDynamic":true}},"useDynamic":true},"74423203-603a-48f4-b84d-6fdc17e03c1d":{"position":{"x":600,"y":540},"parameters":{"LambdaFunctionARN":{"displayName":"${LambdaProcessSurveyFlagsConfig}"},"LambdaInvocationAttributes":{"flag_question_3":{"useDynamic":true},"flag_question_2":{"useDynamic":true},"flag_question_5":{"useDynamic":true},"flag_question_4":{"useDynamic":true},"flag_question_1":{"useDynamic":true}}},"dynamicMetadata":{"flag_question_3":true,"flag_question_2":true,"flag_question_5":true,"flag_question_4":true,"flag_question_1":true}},"3e6e1542-631c-4dd8-868e-15ae830f0255":{"position":{"x":600.8000000000001,"y":764},"parameters":{"LambdaFunctionARN":{"displayName":"${LambdaWriteSurveysResults}"}},"dynamicMetadata":{}}}},"Actions":[{"Parameters":{},"Identifier":"eda22bf3-c3f9-459f-8374-d56f84620644","Type":"DisconnectParticipant","Transitions":{}},{"Parameters":{"Text":"Invalid input."},"Identifier":"54b8b0f4-53b1-493a-9b74-e4056d92400e","Type":"MessageParticipant","Transitions":{"NextAction":"f669287d-527d-41b9-b6e3-ecdbc330755c"}},{"Parameters":{"Attributes":{"loopCounter":"$.External.currentQuestionIndex"}},"Identifier":"f669287d-527d-41b9-b6e3-ecdbc330755c","Type":"UpdateContactAttributes","Transitions":{"NextAction":"56177ee5-4215-4449-a3e3-589d6d7add11","Errors":[{"NextAction":"178a925b-dc1c-4d84-ab5f-84f50b5e8a2e","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Attributes":{"survey_result_$.Attributes.loopCounter":"$.StoredCustomerInput"}},"Identifier":"8c223e1b-d94a-4b9c-acb5-3f400b030105","Type":"UpdateContactAttributes","Transitions":{"NextAction":"241f8a68-56ff-49a2-99ee-68625cd82310","Errors":[{"NextAction":"178a925b-dc1c-4d84-ab5f-84f50b5e8a2e","ErrorType":"NoMatchingError"}]}},{"Parameters":{},"Identifier":"178a925b-dc1c-4d84-ab5f-84f50b5e8a2e","Type":"DisconnectParticipant","Transitions":{}},{"Parameters":{"Attributes":{"loopCounter":"$.External.newCounter"}},"Identifier":"241f8a68-56ff-49a2-99ee-68625cd82310","Type":"UpdateContactAttributes","Transitions":{"NextAction":"aa827bc2-ef0e-491a-b4b6-01122dda599d","Errors":[{"NextAction":"178a925b-dc1c-4d84-ab5f-84f50b5e8a2e","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Text":"$.Attributes.intro"},"Identifier":"3bb7ac4c-4ebf-4c6d-ab1f-fbdbdf8a0748","Type":"MessageParticipant","Transitions":{"NextAction":"aa827bc2-ef0e-491a-b4b6-01122dda599d","Errors":[{"NextAction":"aa827bc2-ef0e-491a-b4b6-01122dda599d","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Text":"Sorry there was an unexpected error. We apologies for the inconvenience."},"Identifier":"e15e93de-3bae-47a8-ae59-d38b239849ce","Type":"MessageParticipant","Transitions":{"NextAction":"eda22bf3-c3f9-459f-8374-d56f84620644","Errors":[{"NextAction":"eda22bf3-c3f9-459f-8374-d56f84620644","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Attributes":{"surveyId":"$.External.surveyId","intro":"$.External.introPrompt","surveySize":"$.External.surveySize","outro":"$.External.outroPrompt","loopCounter":"1"}},"Identifier":"ce7cd3b5-5eec-4d7f-802c-f1e8621baccd","Type":"UpdateContactAttributes","Transitions":{"NextAction":"3bb7ac4c-4ebf-4c6d-ab1f-fbdbdf8a0748","Errors":[{"NextAction":"e15e93de-3bae-47a8-ae59-d38b239849ce","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Text":"Lambda getSurveyConfig error!"},"Identifier":"f1ec1587-371d-4b88-aeb0-cf92c3b10a3e","Type":"MessageParticipant","Transitions":{"NextAction":"eda22bf3-c3f9-459f-8374-d56f84620644"}},{"Parameters":{"FlowLoggingBehavior":"Enabled"},"Identifier":"4aa37d68-34fd-4cbf-af84-dd86cd97d758","Type":"UpdateFlowLoggingBehavior","Transitions":{"NextAction":"768119b4-b9c1-4f0d-85b0-3bb77958e1d0"}},{"Parameters":{"LambdaFunctionARN":"${LambdaGetSurveyConfig.Arn}","InvocationTimeLimitSeconds":"6","LambdaInvocationAttributes":{"surveyId":"$.Attributes.surveyId"}},"Identifier":"768119b4-b9c1-4f0d-85b0-3bb77958e1d0","Type":"InvokeLambdaFunction","Transitions":{"NextAction":"ce7cd3b5-5eec-4d7f-802c-f1e8621baccd","Errors":[{"NextAction":"f1ec1587-371d-4b88-aeb0-cf92c3b10a3e","ErrorType":"NoMatchingError"}]}},{"Parameters":{"LambdaFunctionARN":"${LambdaSurveyUtils.Arn}","InvocationTimeLimitSeconds":"5","LambdaInvocationAttributes":{"max":"$.External.max","flag_question_3":"$.External.flag_question_3","flag_question_2":"$.External.flag_question_2","flag_question_5":"$.External.flag_question_5","min":"$.External.min","currentQuestionIndex":"$.Attributes.loopCounter","flag_question_4":"$.External.flag_question_4","flag_question_1":"$.External.flag_question_1","question_3":"$.External.question_3","question_4":"$.External.question_4","question_1":"$.External.question_1","question_2":"$.External.question_2","operation":"getNextSurveyQuestion","question_5":"$.External.question_5"}},"Identifier":"224cfa54-c321-454b-8911-007386bd9fd3","Type":"InvokeLambdaFunction","Transitions":{"NextAction":"56177ee5-4215-4449-a3e3-589d6d7add11","Errors":[{"NextAction":"da0ecb02-b835-4471-af5e-525686b26248","ErrorType":"NoMatchingError"}]}},{"Parameters":{"ComparisonValue":"$.External.validInput"},"Identifier":"63107da9-ea91-4c3c-b5df-d8303d240363","Type":"Compare","Transitions":{"NextAction":"8c223e1b-d94a-4b9c-acb5-3f400b030105","Conditions":[{"NextAction":"54b8b0f4-53b1-493a-9b74-e4056d92400e","Condition":{"Operator":"Equals","Operands":["false"]}}],"Errors":[{"NextAction":"8c223e1b-d94a-4b9c-acb5-3f400b030105","ErrorType":"NoMatchingCondition"}]}},{"Parameters":{"StoreInput":"True","InputTimeLimitSeconds":"5","Text":"$.External.nextQuestion","DTMFConfiguration":{"DisableCancelKey":"False"},"InputValidation":{"CustomValidation":{"MaximumLength":"1"}}},"Identifier":"56177ee5-4215-4449-a3e3-589d6d7add11","Type":"GetParticipantInput","Transitions":{"NextAction":"3e442c84-4cf0-412b-ad2c-627b9fde7c39","Errors":[{"NextAction":"da0ecb02-b835-4471-af5e-525686b26248","ErrorType":"NoMatchingError"}]}},{"Parameters":{},"Identifier":"da0ecb02-b835-4471-af5e-525686b26248","Type":"DisconnectParticipant","Transitions":{}},{"Parameters":{"LambdaFunctionARN":"${LambdaSurveyUtils.Arn}","InvocationTimeLimitSeconds":"5","LambdaInvocationAttributes":{"max":"$.External.max","flag_question_3":"$.External.flag_question_3","input":"$.StoredCustomerInput","flag_question_2":"$.External.flag_question_2","flag_question_5":"$.External.flag_question_5","min":"$.External.min","currentQuestionIndex":"$.External.currentQuestionIndex","flag_question_4":"$.External.flag_question_4","newCounter":"$.External.newCounter","flag_question_1":"$.External.flag_question_1","question_3":"$.External.question_3","question_4":"$.External.question_4","question_1":"$.External.question_1","question_2":"$.External.question_2","operation":"validateInput","question_5":"$.External.question_5"}},"Identifier":"3e442c84-4cf0-412b-ad2c-627b9fde7c39","Type":"InvokeLambdaFunction","Transitions":{"NextAction":"63107da9-ea91-4c3c-b5df-d8303d240363","Errors":[{"NextAction":"da0ecb02-b835-4471-af5e-525686b26248","ErrorType":"NoMatchingError"}]}},{"Parameters":{"LoopCount":"$.Attributes.surveySize"},"Identifier":"aa827bc2-ef0e-491a-b4b6-01122dda599d","Type":"Loop","Transitions":{"NextAction":"74423203-603a-48f4-b84d-6fdc17e03c1d","Conditions":[{"NextAction":"224cfa54-c321-454b-8911-007386bd9fd3","Condition":{"Operator":"Equals","Operands":["ContinueLooping"]}},{"NextAction":"74423203-603a-48f4-b84d-6fdc17e03c1d","Condition":{"Operator":"Equals","Operands":["DoneLooping"]}}]}},{"Parameters":{},"Identifier":"c96fee53-310f-4d1f-8e88-859e2fad8ab5","Type":"DisconnectParticipant","Transitions":{}},{"Parameters":{"Text":"$.Attributes.outro"},"Identifier":"48c2e006-db9f-4dab-b5bf-e8e81785fc49","Type":"MessageParticipant","Transitions":{"NextAction":"c96fee53-310f-4d1f-8e88-859e2fad8ab5","Errors":[{"NextAction":"c96fee53-310f-4d1f-8e88-859e2fad8ab5","ErrorType":"NoMatchingError"}]}},{"Parameters":{"LambdaFunctionARN":"${LambdaProcessSurveyFlagsConfig.Arn}","InvocationTimeLimitSeconds":"5","LambdaInvocationAttributes":{"flag_question_3":"$.External.flag_question_3","flag_question_2":"$.External.flag_question_2","flag_question_5":"$.External.flag_question_5","flag_question_4":"$.External.flag_question_4","flag_question_1":"$.External.flag_question_1"}},"Identifier":"74423203-603a-48f4-b84d-6fdc17e03c1d","Type":"InvokeLambdaFunction","Transitions":{"NextAction":"3e6e1542-631c-4dd8-868e-15ae830f0255","Errors":[{"NextAction":"3e6e1542-631c-4dd8-868e-15ae830f0255","ErrorType":"NoMatchingError"}]}},{"Parameters":{"LambdaFunctionARN":"${LambdaWriteSurveysResults.Arn}","InvocationTimeLimitSeconds":"5"},"Identifier":"3e6e1542-631c-4dd8-868e-15ae830f0255","Type":"InvokeLambdaFunction","Transitions":{"NextAction":"48c2e006-db9f-4dab-b5bf-e8e81785fc49","Errors":[{"NextAction":"c96fee53-310f-4d1f-8e88-859e2fad8ab5","ErrorType":"NoMatchingError"}]}}],"Settings":{"InputParameters":[],"OutputParameters":[],"Transitions":[]}}'
            InstanceArn: !Ref AmazonConnectInstanceARN
            Name: "Contact Survey"
            State: ACTIVE

    IntegrationAssociationLambdaWriteSurveysResults:
        Type: AWS::Connect::IntegrationAssociation
        Properties:
            InstanceId: !Ref AmazonConnectInstanceARN
            IntegrationType: LAMBDA_FUNCTION
            IntegrationArn: !GetAtt LambdaWriteSurveysResults.Arn

    IntegrationAssociationLambdaGetSurveyConfig:
        Type: AWS::Connect::IntegrationAssociation
        Properties:
            InstanceId: !Ref AmazonConnectInstanceARN
            IntegrationType: LAMBDA_FUNCTION
            IntegrationArn: !GetAtt LambdaGetSurveyConfig.Arn

    IntegrationAssociationLambdaProcessSurveyFlagsConfig:
        Type: AWS::Connect::IntegrationAssociation
        Properties:
            InstanceId: !Ref AmazonConnectInstanceARN
            IntegrationType: LAMBDA_FUNCTION
            IntegrationArn: !GetAtt LambdaProcessSurveyFlagsConfig.Arn


Outputs:
    WebClient:
        Description: "The frontend access URL"
        Value: !GetAtt CloudFrontDistribution.DomainName
    AdminUser:
        Description: "The initial admin user for the frontend"
        Value: !Ref UserPoolUser
